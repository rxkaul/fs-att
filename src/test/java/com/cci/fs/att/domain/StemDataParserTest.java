/*
 * File: $HeadURL: https://svn.cci-dev.com/svn/udpPrototype/foxstream/fs-att/trunk/src/test/java/com/cci/fs/att/domain/StemDataParserTest.java $ 
 * Last Updated On: $Date: 2015-03-24 23:12:11 +0000 (Tue, 24 Mar 2015) $ 
 * Last Updated By: $Author: rajeev $ 
 * 
 * (c) 2014-2015 Customer Care Inc., L.P. All rights reserved. 
 *
 */
package com.cci.fs.att.domain;

import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.when;
import io.pkts.buffer.Buffer;
import io.pkts.buffer.Buffers;
import io.pkts.packet.impl.UdpPacketImpl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import com.sun.org.apache.xerces.internal.impl.dv.util.HexBin;
    

// TODO: Auto-generated Javadoc
/**
 * The class <code>StemDataParserTest</code> contains tests for the class <code>{@link StemDataParser}</code>.
 *
 * @author CCI
 * @version $Rev: 4426 $
 */
@RunWith(PowerMockRunner.class)
@PrepareForTest({UdpPacketImpl.class})
public class StemDataParserTest {
	
	/** The Constant STEM_CTR_DATA. */
	private static final String[] STEM_CTR_DATA = {
		"ff3700000000000401480004000c0002053802d6040000000f42850300002dc6c00000000000000000000000002dc6c0000000000000000000000000000000000000697800000000000000000000000000000000dbb9000000000000000000000ea600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ea600ea5f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		"ff3600000000000101a900015400000000435850393031383530352f3232523541000007de0a120205225754433145454e423639000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005754433145454e
		"ff3600000000000201480004000c0002053802d6200000000f42850300002dc6c00000000000000000000000002dc6c0000000000000000000000000000000000000697800000000000000000000000000000000dbb9000000000000000000000ea600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ea600ea5f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		"ff3700000000000501480004000c0002053802d7040000000f42850400002dc6c00000000000000000000000002dc6c0000000000000000000000000000000000000697800000000000000000000000000000000dbb9000000000000000000000ea600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ea600ea5f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		"ff3600000000000301480004000c0002053802d7200000000f42850400002dc6c00000000000000000000000002dc6c0000000000000000000000000000000000000697800000000000000000000000000000000dbb9000000000000000000000ea600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ea600ea5f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
	};
	
	/** The Constant STEM_CTUM_DATA. */
	private static final String[] STEM_CTUM_DATA = {
		"6501000000000003002c0113042a625e859d13110800001813f41062620000938050131108ffe10e08b6039c0001921311080000",
        "6501000000000004002c01130434d55e859d13110800001813f41062620000938050131108ffe10e085c21160001931311080000",
        "6501000000000005002c011305259e5e859d13110800001813f41062620000938050131108ffe10e0875d0690001941311080000",
        "6501000000000006002c01130530175e859d13110800001813f41062620000938050131108ffe10e0820f5990001951311080000",
        "6e07000000000001001c04020307de0a111305330160575443334552434d4d4531310000"
	};
	//@Mock
	//UdpPacketImpl packet = new UdpPacketImpl(null,null,null);
	/**
	 * Run the CtrEvent class tests.
	 *
	 * @throws Exception the exception
	 */
	@Test
	public void testParseCtrData() {
		//
		// Mock the UDP packet so we do not have to actually set 
		// one up.
		final UdpPacketImpl packet = PowerMockito.mock(UdpPacketImpl.class);
		
		final StemDataParser parser = new StemDataParser(CtrEvent.CTR_DST_PORT,
				CtumEvent.CTUM_DST_PORT, PcmdRecord.PCMD_DST_PORT);
		parser.recordMetrics();
		
		when(packet.getDestinationPort()).thenReturn(CtrEvent.CTR_DST_PORT);
		byte[] bytes = null;
		Buffer buffer = null;
		for (int ind=0; ind < STEM_CTR_DATA.length; ind++){
			bytes = HexBin.decode(STEM_CTR_DATA[ind]);
			buffer = Buffers.wrap(bytes);
			when(packet.getPayload()).thenReturn(buffer);
			when(packet.getSourcePort()).thenReturn(9032);
			parser.parse(packet);
		}
		
		parser.dumpMetrics();
		
		assertTrue("Passed parsing CTR data.",true);
	}
	
	/**
	 * Run the CtrEvent class tests.
	 *
	 * @throws Exception the exception
	 */
	@Test
	public void testParseCtumData() {
		//
		// Mock the UDP packet so we do not have to actually set 
		// one up.
		final UdpPacketImpl packet = PowerMockito.mock(UdpPacketImpl.class);
		
		final StemDataParser parser = new StemDataParser(CtrEvent.CTR_DST_PORT,
				CtumEvent.CTUM_DST_PORT, PcmdRecord.PCMD_DST_PORT);
		
		when(packet.getDestinationPort()).thenReturn(CtumEvent.CTUM_DST_PORT);
		byte[] bytes = null;
		Buffer buffer = null;
		for (int ind=0; ind < STEM_CTUM_DATA.length; ind++){
			bytes = HexBin.decode(STEM_CTUM_DATA[ind]);
			
			buffer = Buffers.wrap(bytes);
			when(packet.getPayload()).thenReturn(buffer);
			when(packet.getSourcePort()).thenReturn(9032);
			parser.parse(packet);
		}
		
		assertTrue("Passed parsing CTUM data.",true);
	}

	/**
	 * Launch the test.
	 *
	 * @param args the command line arguments
	 *
	 */
	public static void main(String[] args) {
		new org.junit.runner.JUnitCore().run(StemDataParserTest.class);
	}
}